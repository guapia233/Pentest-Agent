import sys

from elasticsearch import Elasticsearch
from langchain_community.vectorstores.elastic_vector_search import ElasticVectorSearch
sys.path.append("/home/kali/Agent")
import json
import requests
from langchain_community.embeddings.openai import OpenAIEmbeddings
from langchain_community.vectorstores.elasticsearch import ElasticsearchStore
from langchain_text_splitters import RecursiveJsonSplitter
from langchain.indexes import SQLRecordManager, index
from langchain_core.documents import Document
from util.jsonKaliloader import JsonKaliLoader

splitter = RecursiveJsonSplitter(max_chunk_size=300)
# json_file_path = '/home/kali/Agent/data/output.json'
json_file_path =  'D:\workplace\Agent-main\data\output.json'
loader = JsonKaliLoader(json_file_path)
data = loader.load()
# json_chunks = splitter.split_json(json_data=data)

# The splitter can also output documents
docs = splitter.create_documents(texts=[data])
es_url = "http://localhost:9200"
index_name = "test_index"
embedding = OpenAIEmbeddings(api_key="sk-proj-AmJg3kq457E8EXaNilmZT3BlbkFJxAlW57CiKjgdiaiHIJrG")
collection_name = "test_index"
vectorstore = ElasticsearchStore(
    es_url=es_url, index_name=index_name, embedding=embedding
)
#删除索引
# 创建 Elasticsearch 客户端
client = Elasticsearch("http://localhost:9200")
# 要删除的索引名称
# 判断索引是否存在
# if client.indices.exists(index=index_name):
#     # 删除索引
#     client.indices.delete(index=index_name)
#     print(f"Index '{index_name}' deleted successfully.")
# else:
#     print(f"Index '{index_name}' does not exist.")
# Define index mapping
# index_mapping = {
#     "mappings": {
#         "properties": {
#             "vector": {
#                 "type": "dense_vector",
#             },
#             "metadata": {
#                 "type": "object"
#             },
#             "text": {
#                 "type": "text"
#             }
#         }
#     }
# }
# Create the index with the correct mapping
# vectorstore.client.indices.create(
#     index=index_name,
#     body=index_mapping
# )
# db = vectorstore.from_documents(
#     docs,
#     embedding,
#     index_name=index_name,
#     es_url=es_url
# )
info = vectorstore.client.info
print(info)

query = "怎么扫描漏洞"
question_embedding = embedding.embed_query(query)
search_results = vectorstore.similarity_search(query,k=1)
print(search_results)


