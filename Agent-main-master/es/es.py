
import os
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.vectorstores import ElasticsearchStore
from langchain.embeddings import OpenAIEmbeddings
from util.JsonLoader import JsonLoader

# 谷歌搜索
os.environ["SERPAPI_API_KEY"] ="e71f6b3a673a2f119009e77092efea1c81774854d2f6f04917f7d1c1ba01c714"
os.environ["OPENAI_API_KEY"] = "sk-proj-AmJg3kq457E8EXaNilmZT3BlbkFJxAlW57CiKjgdiaiHIJrG"
json_file_path = "hacksudo-Thor.json"



from elasticsearch import Elasticsearch

# Create the client instance
client = Elasticsearch(

    hosts=["http://192.168.92.131:9200"]

)
client.indices.delete(index="ip_index", ignore_unavailable=True)

# 文本分块
json_file_path = '/home/kali/Agent/Agent-main-master/es/hacksudo-Thor.json'
loader = JsonLoader(json_file_path)
document_list = loader.load()
print(f"Successfully loaded {len(document_list)} documents")
metadata = []
content = []
for doc in document_list:
        content.append(doc["question"])
        metadata.append({
            "answer": doc["answer"]
        })
        text_splitter = RecursiveCharacterTextSplitter.from_tiktoken_encoder(
            chunk_size=512,
            chunk_overlap=256,
        )
        docs = text_splitter.create_documents(content, metadatas=metadata)


# 创建索引
embeddings = OpenAIEmbeddings()

vector_store = ElasticsearchStore.from_documents(
    docs,
    index_name="ip_index",
    es_url= "http://192.168.92.131:9200",
    embedding=embeddings
)
def showResults(output):
  print("Total results: ", len(output))
  for index in range(len(output)):
    print(output[index])
if __name__ == '__main__':
    question = '当需要获取目标靶机root权限时，应执行识别hacksudo-Thor靶机渗透任务，以下是详细步骤：'
    question_embedding = embeddings.embed_query(question)
    docs = vector_store.similarity_search(question,k=1)
    showResults(docs)