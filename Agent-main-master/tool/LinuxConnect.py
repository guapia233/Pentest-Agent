# Build the Nmap command
# 检测目标主机ssh服务器开启状态：sudo service ssh status
# 如果SSH服务器未运行，使用以下命令启动ssh服务器：sudo service ssh start
# 创建SSH客户端
import logging
from datetime import time

import paramiko
from paramiko.channel import Channel

from contant.LinuxContant import LHOST, username, password
logging.basicConfig(level=logging.INFO)


class LinuxConnect:
    def __init__(self, LHOST, username, password):
        self.ssh = paramiko.SSHClient()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        self.connect(LHOST, username, password)

    # 连接远程Linux主机

    def connect(self, LHOST, username, password):
        try:
            self.ssh.connect(LHOST, username=username, password=password)
            logging.info("连接成功")
        except paramiko.AuthenticationException:
            logging.warning("账户密码错误")
        except paramiko.SSHException as ssh_err:
            logging.warning("ssh错误")
        except Exception as e:
            print(f"An error occurred while connecting to the remote host: {e}")

    def close(self):
        self.ssh.close()

    def invoke_shell(self):
        # 打开一个交互式的 Shell
        logging.info("打开一个交互式的 Shell")
        return self.ssh.invoke_shell()



    def shellClose(self,shell):
        shell.close()
        self.ssh.close()
        return "关闭ssh通道"

if __name__ == '__main__':
    connect = LinuxConnect(LHOST, username, password)
    shell = connect.invoke_shell()
    print(shell)


