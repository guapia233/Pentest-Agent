from typing import Type

from pydantic import Field
from langchain_core.tools import BaseTool
from pydantic import BaseModel
from contant.LinuxContant import LHOST, username, password, RHOSTS
from tool.LinuxConnect import LinuxConnect
import logging

'''
这主要是做漏洞检测的
1.命令行检测漏洞的情况
2.先直接让Agent自己去分析，是否能分析到ms17-010
'''
logging.basicConfig(format='%(asctime)s - %(filename)s[line:%(lineno)d] - %(levelname)s: %(message)s',
                    level=logging.INFO)


class VulnInput(BaseModel):
    IP_address: str = Field()


# 3.1.使用名称向代理注册该工具 "perform_vuln_scan"。
class perform_vuln_scan(BaseTool):
    name = "perform_vuln_scan"
    description = "用Nmap扫描指定主机IP_address，检测该主机上可能存在的漏洞"
    args_schema: Type[BaseModel] = VulnInput

    # 在工具类中的参数加入一个类，但并不是prompt中提供，这可以吗
    def _run(self ,IP_address: str):
        """使用Nmap扫描指定主机IP_address，检测该主机上可能存在的漏洞"""
        connect = LinuxConnect(LHOST, username, password)
        # 写命令 扫描漏洞
        command_vuln = 'nmap  --script=vuln ' + IP_address
        try:
            logging.info(f"写入命令行：{command_vuln}")
            stdin, stdout, stderr = connect.ssh.exec_command(command_vuln)
            logging.info(f"成功获得漏洞扫描信息:{stdout}");
        except:
            raise Exception("系统异常")
        # 输出漏洞
        # 输出命令执行结果
        vuln = stdout.read().decode()
        return f"得到漏洞扫描结果{vuln}"


if __name__ == '__main__':
    scan = perform_vuln_scan()
    run = scan._run(IP_address=RHOSTS)
    print(run)

