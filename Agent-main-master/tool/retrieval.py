# 导入langchain的tool
from langchain.agents import tool
from langchain.vectorstores import ElasticsearchStore
from pydantic import BaseModel, Field
from langchain_community.embeddings.openai import OpenAIEmbeddings
from langchain_core.runnables import RunnableLambda, RunnableParallel, RunnablePassthrough, Runnable
from langchain_core.retrievers import BaseRetriever, RetrieverOutput
import json

embeddings = OpenAIEmbeddings()


class OpenMeteoInput(BaseModel):
    query: str = Field(..., description="Question to be retrieved")


@tool(args_schema=OpenMeteoInput)
def retrieval_tool(query: str) -> object:
    """Search for relevant information online.

    This tool takes a query as input and performs a search to retrieve
    relevant information from online sources. The query should be a concise
    and clear expression of the information you are looking for.

    Parameters:
     query (str): Query to search for relevant information.

    Returns:
     object: Retrieved information based on the provided query.
    """
    vector_store = ElasticsearchStore(
        es_url="http://localhost:9200",
        index_name="ip_index",
        embedding=embeddings
    )
    retriever = vector_store.as_retriever(search_kwargs={'k': 1, 'lambda_mult': 0.25})
    if not isinstance(retriever, BaseRetriever):
        retrieval_docs: Runnable[dict, RetrieverOutput] = retriever
    else:
        retrieval_docs = RunnableLambda(lambda x: x["input"]) | retriever
    # 这是一个运行链，没有llm
    result = retrieval_docs.invoke({"input": query})
    return convert_to_json(result)


def convert_to_json(documents):
    # 使用json.dumps将数组转换为JSON字符串
    json_string = json.dumps([{'question': doc.page_content, 'answer': doc.metadata['answer']} for doc in documents],
                             ensure_ascii=False, indent=2)
    return json_string


if __name__ == '__main__':
    result = retrieval_tool.run({"query": "当目标靶机IP未知时,应执行识别目标靶机的IP这一子任务,以下是详细步骤："})
    print(result)
