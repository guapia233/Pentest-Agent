import sys
sys.path.append("/home/kali/Agent")
from ProxyAgent.MyRetrieveUserProxyAgent import MyRetrieveUserProxyAgent
PROBLEM = "漏洞扫描的步骤是怎么样的"
import autogen


config_list = autogen.config_list_from_json("api_config.json")
print("LLM models: ", [config_list[i]["model"] for i in range(len(config_list))])
api_key = "sk-proj-AmJg3kq457E8EXaNilmZT3BlbkFJxAlW57CiKjgdiaiHIJrG"
CONFIG_LLM = [{"model": "gpt-3.5-turbo", "api_key": api_key}]

def termination_msg(x):
    return isinstance(x, dict) and "TERMINATE" == str(x.get("content", ""))[-9:].upper()


llm_config = {"config_list": CONFIG_LLM, "timeout": 60, "temperature": 0.8, "seed": 1234}



reviewer = autogen.AssistantAgent(
    name="Pentest_Reviewer",
    is_termination_msg=termination_msg,
    system_message=(
        "你是渗透测试审查员。 "
        "您的任务是复习渗透测试知识和流程。 "
        "您应该将任务分解为子任务，并仔细审查每一个子任务。 "
        "为每个子任务提供详细的反馈和改进。 "
        "完成所有操作后，最后回复“TERMINATE”。"
    ),
    llm_config=llm_config,
    description="渗透测试审查员，可以审查渗透测试知识和流程，将任务分解为子任务进行详细审查。",
)

pentest_aid = MyRetrieveUserProxyAgent(
    name="Pentest_Assistant",
    is_termination_msg=termination_msg,
    human_input_mode="NEVER",
    default_auto_reply="如果任务已完成，请回复“TERMINATE”。",
    max_consecutive_auto_reply=3,
    retrieve_config={
        "task": "qa",
        "docs_path": "/home/kali/Agent/data/pentest_output.json",  # 修改路径以指向渗透测试相关的文档
        "chunk_token_size": 1000,
        "model": config_list[0]["model"],
        "get_or_create": True,
    },
    code_execution_config=False,  # 不执行代码
    description="具有额外内容检索能力的助理，负责解决渗透测试相关问题。",
)

pentest_aid.initiate_chat(
        reviewer,
        message=pentest_aid.message_generator,
        problem=PROBLEM,
        n_results=3,
    )