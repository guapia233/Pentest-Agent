import os
import openai
from dotenv import load_dotenv, find_dotenv
from langchain.memory import ConversationBufferMemory
from langchain_community.llms.openai import OpenAI

from agent.prompt import template, templat_English
from tool import tools
_ = load_dotenv(find_dotenv())  # read local .env file
openai.api_key = os.environ['OPENAI_API_KEY']
from langchain.tools.render import render_text_description
from langchain.agents.output_parsers import ReActSingleInputOutputParser
from langchain.agents.format_scratchpad import format_log_to_str
from langchain import hub

llm=OpenAI(temperature=0)

from langchain.prompts import PromptTemplate
prompt = PromptTemplate(
    template=template,
    input_variables=["tools","tool_names", "input","agent_scratchpad",]
)
prompt = prompt.partial(
    # 以纯文本形式呈现工具名称和描述
    tools=render_text_description(tools),
    tool_names=", ".join([t.name for t in tools]),
)
llm_with_stop = llm.bind(stop=["\n观察"])
agent = {
    "input": lambda x: x["input"],
    "agent_scratchpad": lambda x: format_log_to_str(x['intermediate_steps']),
    # "chat_history": lambda x: x["chat_history"],
} | prompt | llm_with_stop | ReActSingleInputOutputParser()
# 创建AgentExecutor

from langchain.agents import AgentExecutor

# memory = ConversationBufferMemory(memory_key="chat_history")
# agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, memory=memory,handle_parsing_errors=True)
agent_executor = AgentExecutor(agent=agent, tools=tools, verbose=True, handle_parsing_errors=True)
# 从控制台获取输入
user_input = input("请输入你的输入内容：")
# result=agent_executor.invoke({"input": "当目标靶机IP未知时，告诉我攻击机可以访问的目录,攻击机的网段是192.168.60.0/24"})
# 将用户输入传递给 agent_executor.invoke() 函数
result = agent_executor.invoke({"input": user_input})
# Access the output
output = result['output']
print("Agent Output:", output)


